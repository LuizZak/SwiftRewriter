#if !canImport(ObjectiveC)
import XCTest

extension AccessLevelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AccessLevelTests = [
        ("testIsMoreAccessibleThan", testIsMoreAccessibleThan),
    ]
}

extension ExpressionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpressionTests = [
        ("testArrayLiteralEquality", testArrayLiteralEquality),
        ("testAssignBlock", testAssignBlock),
        ("testAssignParentFunctionCall", testAssignParentFunctionCall),
        ("testAssignParentSubscription", testAssignParentSubscription),
        ("testAssignPostfixOperator", testAssignPostfixOperator),
        ("testBinaryEquality", testBinaryEquality),
        ("testBlockEquality", testBlockEquality),
        ("testCastEquality", testCastEquality),
        ("testConstantEquality", testConstantEquality),
        ("testDescriptionBinaryOps", testDescriptionBinaryOps),
        ("testDescriptionCasts", testDescriptionCasts),
        ("testDescriptionConstants", testDescriptionConstants),
        ("testDescriptionExpressions", testDescriptionExpressions),
        ("testDescriptionNullCoalesce", testDescriptionNullCoalesce),
        ("testDescriptionOptionalAccess", testDescriptionOptionalAccess),
        ("testDictionaryLiteralEquality", testDictionaryLiteralEquality),
        ("testIdentifierEquality", testIdentifierEquality),
        ("testLiteralExpressionKind", testLiteralExpressionKind),
        ("testLiteralExpressionKindIsNilForAllNonLiteralExpressions", testLiteralExpressionKindIsNilForAllNonLiteralExpressions),
        ("testLiteralExpressionKindOnParensExpressionTransmitsLiteralKindOfInnerExpression", testLiteralExpressionKindOnParensExpressionTransmitsLiteralKindOfInnerExpression),
        ("testLiteralExpressionKindOnPrefixExpressionTransmitsLiteralKindOfInnerExpression", testLiteralExpressionKindOnPrefixExpressionTransmitsLiteralKindOfInnerExpression),
        ("testLiteralExpressionKindOnUnaryExpressionTransmitsLiteralKindOfInnerExpression", testLiteralExpressionKindOnUnaryExpressionTransmitsLiteralKindOfInnerExpression),
        ("testParensEquality", testParensEquality),
        ("testPostfixEquality", testPostfixEquality),
        ("testRangeExpressions", testRangeExpressions),
        ("testTernaryEquality", testTernaryEquality),
        ("testUnknownEquality", testUnknownEquality),
        ("testUnwrappingParens", testUnwrappingParens),
    ]
}

extension Expression_MatcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Expression_MatcherTests = [
        ("testMatchCall", testMatchCall),
        ("testMatchFunctionArgumentIsLabeled", testMatchFunctionArgumentIsLabeled),
        ("testMatchFunctionArgumentIsNotLabeled", testMatchFunctionArgumentIsNotLabeled),
        ("testMatchInvertedPostfix", testMatchInvertedPostfix),
        ("testMatchInvertedPostfixPostfixAccess", testMatchInvertedPostfixPostfixAccess),
        ("testMatchNilCheck", testMatchNilCheck),
        ("testMatchNilCompare", testMatchNilCompare),
    ]
}

extension FunctionIdentifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FunctionIdentifierTests = [
        ("testIdentifierDescription", testIdentifierDescription),
    ]
}

extension FunctionSignatureParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FunctionSignatureParserTests = [
        ("testExpectedArgumentAfterComma", testExpectedArgumentAfterComma),
        ("testExpectedArgumentNameError", testExpectedArgumentNameError),
        ("testExtraneousInputError", testExtraneousInputError),
        ("testFunctionSignatureWithParameters", testFunctionSignatureWithParameters),
        ("testFunctionSignatureWithRethrows", testFunctionSignatureWithRethrows),
        ("testFunctionSignatureWithReturn", testFunctionSignatureWithReturn),
        ("testFunctionSignatureWithThrows", testFunctionSignatureWithThrows),
        ("testInvalidDefaultArgument", testInvalidDefaultArgument),
        ("testMutatingFunction", testMutatingFunction),
        ("testParseDefaultValueDefault", testParseDefaultValueDefault),
        ("testParseDefaultValueSquareBrackets", testParseDefaultValueSquareBrackets),
        ("testParseEmptyFunctionSignature", testParseEmptyFunctionSignature),
        ("testParseEmptyParameters", testParseEmptyParameters),
        ("testParseFullSignature", testParseFullSignature),
        ("testParseParameterAttributes", testParseParameterAttributes),
        ("testParseParameterAttributesAndInout", testParseParameterAttributesAndInout),
        ("testParseParameterAttributesBlockCallingConvention", testParseParameterAttributesBlockCallingConvention),
        ("testParseParameterInout", testParseParameterInout),
        ("testParseSingleParameter", testParseSingleParameter),
        ("testParseSingleParameterWithLabel", testParseSingleParameterWithLabel),
        ("testParseTwoParameters", testParseTwoParameters),
        ("testUnexpectedCharacterInArgumentList", testUnexpectedCharacterInArgumentList),
    ]
}

extension FunctionSignatureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FunctionSignatureTests = [
        ("testPossibleSelectorSignatures", testPossibleSelectorSignatures),
    ]
}

extension PatternTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PatternTests = [
        ("testFailedSubpatternAt", testFailedSubpatternAt),
        ("testSubpatternAt", testSubpatternAt),
    ]
}

extension StatementTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StatementTests = [
        ("testCreatingCompoundStatementWithLiteralProperlySetsParents", testCreatingCompoundStatementWithLiteralProperlySetsParents),
    ]
}

extension SwiftASTSerializerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftASTSerializerTests = [
        ("testEncodeDecodeRoundtrip", testEncodeDecodeRoundtrip),
        ("testEncodeExpressionType", testEncodeExpressionType),
        ("testEncodeExpressionTypeOnEncodeStatements", testEncodeExpressionTypeOnEncodeStatements),
    ]
}

extension SwiftTypeParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftTypeParserTests = [
        ("testCannotUseInoutAsParameterLabel", testCannotUseInoutAsParameterLabel),
        ("testCannotUseInoutAsParameterName", testCannotUseInoutAsParameterName),
        ("testMetatypeOfIdentifier", testMetatypeOfIdentifier),
        ("testMetatypeOfNestedIdentifier", testMetatypeOfNestedIdentifier),
        ("testMetatypeOfOptionalType", testMetatypeOfOptionalType),
        ("testMetatypeOfOptionalTypeWithinTupleType", testMetatypeOfOptionalTypeWithinTupleType),
        ("testNestedType", testNestedType),
        ("testParseArray", testParseArray),
        ("testParseBlockArgumentWithInOutAndParameterNameAndLabel", testParseBlockArgumentWithInOutAndParameterNameAndLabel),
        ("testParseBlockArgumentWithInOutAndParameterName", testParseBlockArgumentWithInOutAndParameterName),
        ("testParseBlockArgumentWithInOut", testParseBlockArgumentWithInOut),
        ("testParseBlockType", testParseBlockType),
        ("testParseBlockTypeTakingBlockType", testParseBlockTypeTakingBlockType),
        ("testParseBlockTypeWithMultipleParameterAnnotations", testParseBlockTypeWithMultipleParameterAnnotations),
        ("testParseBlockTypeWithParameterAnnotationAfterInout", testParseBlockTypeWithParameterAnnotationAfterInout),
        ("testParseBlockTypeWithParameterAnnotationAfterParameterLabel", testParseBlockTypeWithParameterAnnotationAfterParameterLabel),
        ("testParseBlockTypeWithParameterAnnotationAfterParameterName", testParseBlockTypeWithParameterAnnotationAfterParameterName),
        ("testParseBlockTypeWithParameterAnnotation", testParseBlockTypeWithParameterAnnotation),
        ("testParseBlockTypeWithParameterAnnotationWithParenthesis", testParseBlockTypeWithParameterAnnotationWithParenthesis),
        ("testParseBlockTypeWithVariadicParameterEllipsis", testParseBlockTypeWithVariadicParameterEllipsis),
        ("testParseBlockWithParameterLabels", testParseBlockWithParameterLabels),
        ("testParseDirectory", testParseDirectory),
        ("testParseEllipsisInTupleError", testParseEllipsisInTupleError),
        ("testParseEmptyTuple", testParseEmptyTuple),
        ("testParseExtraCharacterMessage", testParseExtraCharacterMessage),
        ("testParseGenericType", testParseGenericType),
        ("testParseGenericTypeWithinGenericType", testParseGenericTypeWithinGenericType),
        ("testParseGenericTypeWithTupleType", testParseGenericTypeWithTupleType),
        ("testParseIdentifierType", testParseIdentifierType),
        ("testParseInoutAfterInoutError", testParseInoutAfterInoutError),
        ("testParseInvalidTokenAfterPeriodError", testParseInvalidTokenAfterPeriodError),
        ("testParseMissingTypeAfterCommaInGenericSignatureError", testParseMissingTypeAfterCommaInGenericSignatureError),
        ("testParseOptionalBlock", testParseOptionalBlock),
        ("testParseOptionalIdentifierType", testParseOptionalIdentifierType),
        ("testParseOptionalImplicitlyUnwrappedOptionalIdentifierType", testParseOptionalImplicitlyUnwrappedOptionalIdentifierType),
        ("testParseProtocolCompositionAfterNonComposableTypeInTupleError", testParseProtocolCompositionAfterNonComposableTypeInTupleError),
        ("testParseProtocolCompositionAfterTupleError", testParseProtocolCompositionAfterTupleError),
        ("testParseProtocolComposition", testParseProtocolComposition),
        ("testParseProtocolCompositionInBlockArgument", testParseProtocolCompositionInBlockArgument),
        ("testParseTupleInTupleType", testParseTupleInTupleType),
        ("testParseTupleType", testParseTupleType),
        ("testParseTupleTypeWithLabels", testParseTupleTypeWithLabels),
        ("testProtocolCompositionStartingWithNestedTypeInTuple", testProtocolCompositionStartingWithNestedTypeInTuple),
        ("testProtocolCompositionStartingWithNestedTypeInTupleWithBlockOnRightSideError", testProtocolCompositionStartingWithNestedTypeInTupleWithBlockOnRightSideError),
        ("testProtocolCompositionStartingWithNestedTypeInTupleWithNestedTypeAfter", testProtocolCompositionStartingWithNestedTypeInTupleWithNestedTypeAfter),
        ("testProtocolCompositionStartingWithNestedTypeInTupleWithTupledNestedTypeAfter", testProtocolCompositionStartingWithNestedTypeInTupleWithTupledNestedTypeAfter),
        ("testProtocolCompositionStartingWithNestedTypeInTupleWithTupledTypeAfter", testProtocolCompositionStartingWithNestedTypeInTupleWithTupledTypeAfter),
        ("testProtocolCompositionWithBlockOnRightSideError", testProtocolCompositionWithBlockOnRightSideError),
        ("testProtocolCompositionWithMetatypeOnRightSideError", testProtocolCompositionWithMetatypeOnRightSideError),
        ("testProtocolCompositionWithNominalTypeInTuple", testProtocolCompositionWithNominalTypeInTuple),
        ("testProtocolCompositionWithNominalWithBlockOnRightSideError", testProtocolCompositionWithNominalWithBlockOnRightSideError),
        ("testProtocolCompositionWithParenthesizedProtocolComposition", testProtocolCompositionWithParenthesizedProtocolComposition),
        ("testProtocolCompositionWithParenthesizedTypenames", testProtocolCompositionWithParenthesizedTypenames),
        ("testProtocolCompositionWithProtocolCompositionInTuple", testProtocolCompositionWithProtocolCompositionInTuple),
        ("testProtocolMetatypeOfIdentifier", testProtocolMetatypeOfIdentifier),
        ("testRandomTypeParsingStability", testRandomTypeParsingStability),
        ("testRandomValidTypeParsing", testRandomValidTypeParsing),
        ("testVoidParsesAsTypeAliasOfEmptyTuple", testVoidParsesAsTypeAliasOfEmptyTuple),
    ]
}

extension SwiftTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftTypeTests = [
        ("testDescriptionArrayType", testDescriptionArrayType),
        ("testDescriptionBlockFull", testDescriptionBlockFull),
        ("testDescriptionBlockType", testDescriptionBlockType),
        ("testDescriptionBlockTypeWithParameters", testDescriptionBlockTypeWithParameters),
        ("testDescriptionBlockTypeWithReturnType", testDescriptionBlockTypeWithReturnType),
        ("testDescriptionDictionaryType", testDescriptionDictionaryType),
        ("testDescriptionGeneric", testDescriptionGeneric),
        ("testDescriptionImplicitOptionalWithOptionalType", testDescriptionImplicitOptionalWithOptionalType),
        ("testDescriptionImplicitOptionalWithTypeName", testDescriptionImplicitOptionalWithTypeName),
        ("testDescriptionMetadata", testDescriptionMetadata),
        ("testDescriptionNestedType", testDescriptionNestedType),
        ("testDescriptionOptionalWithBlockTupleType", testDescriptionOptionalWithBlockTupleType),
        ("testDescriptionOptionalWithGenericType", testDescriptionOptionalWithGenericType),
        ("testDescriptionOptionalWithNestedType", testDescriptionOptionalWithNestedType),
        ("testDescriptionOptionalWithOptionalType", testDescriptionOptionalWithOptionalType),
        ("testDescriptionOptionalWithProtocolComposition", testDescriptionOptionalWithProtocolComposition),
        ("testDescriptionOptionalWithProtocolCompositionType", testDescriptionOptionalWithProtocolCompositionType),
        ("testDescriptionOptionalWithTupleType", testDescriptionOptionalWithTupleType),
        ("testDescriptionOptionalWithTypeName", testDescriptionOptionalWithTypeName),
        ("testDescriptionProtocolComposition", testDescriptionProtocolComposition),
        ("testDescriptionTupleType", testDescriptionTupleType),
        ("testDescriptionTypeName", testDescriptionTypeName),
        ("testEncode", testEncode),
        ("testEncodeAsNested", testEncodeAsNested),
        ("testEncodeEmptyTuple", testEncodeEmptyTuple),
        ("testEncodeNAryTypedTuple", testEncodeNAryTypedTuple),
        ("testEncodeSingleTypeTuple", testEncodeSingleTypeTuple),
        ("testEncodeTwoTypedTuple", testEncodeTwoTypedTuple),
        ("testIterateOneOrMore", testIterateOneOrMore),
        ("testIterateOneOrMoreOneItem", testIterateOneOrMoreOneItem),
        ("testIterateTwoOrMore", testIterateTwoOrMore),
        ("testIterateZeroOrMore", testIterateZeroOrMore),
        ("testOneOrMoreInitializing", testOneOrMoreInitializing),
        ("testTwoOrMoreInitializing", testTwoOrMoreInitializing),
        ("testWithSameOptionalityAs", testWithSameOptionalityAs),
    ]
}

extension SyntaxNodeIteratorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxNodeIteratorTests = [
        ("testArrayLiteral", testArrayLiteral),
        ("testArrayLiteralExpression", testArrayLiteralExpression),
        ("testAssignmentExpression", testAssignmentExpression),
        ("testBinaryExpression", testBinaryExpression),
        ("testBlockTraversalFalse", testBlockTraversalFalse),
        ("testBlockTraversalTrue", testBlockTraversalTrue),
        ("testBreak", testBreak),
        ("testCast", testCast),
        ("testCastExpression", testCastExpression),
        ("testCompound", testCompound),
        ("testContinue", testContinue),
        ("testDefer", testDefer),
        ("testDictionaryLiteral", testDictionaryLiteral),
        ("testDictionaryLiteralExpression", testDictionaryLiteralExpression),
        ("testDo", testDo),
        ("testFallthourh", testFallthourh),
        ("testForStatementInspectingBlocks", testForStatementInspectingBlocks),
        ("testForStatementNotInspectingBlocks", testForStatementNotInspectingBlocks),
        ("testIf", testIf),
        ("testParens", testParens),
        ("testParensExpression", testParensExpression),
        ("testPostfix", testPostfix),
        ("testPostfixFunctionCallExpression", testPostfixFunctionCallExpression),
        ("testPostfixSubscriptExpression", testPostfixSubscriptExpression),
        ("testPrefix", testPrefix),
        ("testPrefixExpression", testPrefixExpression),
        ("testReturn", testReturn),
        ("testReturnInspectingBlocks", testReturnInspectingBlocks),
        ("testSizeOf", testSizeOf),
        ("testStatementVisitOrder", testStatementVisitOrder),
        ("testSwitchInspectingBlocks", testSwitchInspectingBlocks),
        ("testSwitchNotInspectingBlocks", testSwitchNotInspectingBlocks),
        ("testTernary", testTernary),
        ("testTernaryExpression", testTernaryExpression),
        ("testUnary", testUnary),
        ("testUnaryExpression", testUnaryExpression),
        ("testVariableDeclarationsInspectingBlocks", testVariableDeclarationsInspectingBlocks),
        ("testVariableDeclarationsNotInspectingBlocks", testVariableDeclarationsNotInspectingBlocks),
        ("testWhileStatement", testWhileStatement),
    ]
}

extension SyntaxNodeRewriterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxNodeRewriterTests = [
        ("testRewriterKeepsFunctionCallPostfixInformation", testRewriterKeepsFunctionCallPostfixInformation),
        ("testRewriterKeepsMemberInformation", testRewriterKeepsMemberInformation),
        ("testRewriterKeepsSubscriptInformation", testRewriterKeepsSubscriptInformation),
        ("testRewriterKeepsSyntaxTreeEqual", testRewriterKeepsSyntaxTreeEqual),
    ]
}

extension SyntaxNodeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SyntaxNodeTests = [
        ("testFirstAncestor", testFirstAncestor),
        ("testIsDescendent", testIsDescendent),
    ]
}

extension TypeFormatterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TypeFormatterTests = [
        ("testAsStringFunctionSignature", testAsStringFunctionSignature),
        ("testAsStringParameterDefaultValue", testAsStringParameterDefaultValue),
    ]
}

extension ValueMatcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueMatcherTests = [
        ("testBindKeypath", testBindKeypath),
        ("testBindMatch", testBindMatch),
        ("testCreateMatcherWithKeypath", testCreateMatcherWithKeypath),
        ("testMatchAST", testMatchAST),
        ("testMatcherWithTwoKeypaths", testMatcherWithTwoKeypaths),
        ("testMatchKeypath", testMatchKeypath),
        ("testMatchKeypathFalse", testMatchKeypathFalse),
        ("testMatchKeypathInvokesGetter", testMatchKeypathInvokesGetter),
        ("testMatchRuleAll", testMatchRuleAll),
        ("testMatchRuleAllOperator", testMatchRuleAllOperator),
        ("testMatchRuleAny", testMatchRuleAny),
        ("testMatchRuleAnyOf", testMatchRuleAnyOf),
        ("testMatchRuleAnyOfOperator", testMatchRuleAnyOfOperator),
        ("testMatchRuleClosure", testMatchRuleClosure),
        ("testMatchRuleDifferentThan", testMatchRuleDifferentThan),
        ("testMatchRuleEquals", testMatchRuleEquals),
        ("testMatchRuleExtract", testMatchRuleExtract),
        ("testMatchRuleExtractOperator", testMatchRuleExtractOperator),
        ("testMatchRuleExtractOptional", testMatchRuleExtractOptional),
        ("testMatchRuleExtractOptionalOperator", testMatchRuleExtractOptionalOperator),
        ("testMatchRuleExtractOptionalToNonOptionalOperator", testMatchRuleExtractOptionalToNonOptionalOperator),
        ("testMatchRuleNone", testMatchRuleNone),
        ("testMatchRuleType", testMatchRuleType),
        ("testMatchSelf", testMatchSelf),
        ("testMatchWithMatcher", testMatchWithMatcher),
    ]
}

extension ValueMatcher_MatchersTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueMatcher_MatchersTests = [
        ("testCollectionAtIndexEquals", testCollectionAtIndexEquals),
        ("testCollectionAtIndexMatcher", testCollectionAtIndexMatcher),
        ("testCollectionAtIndexRule", testCollectionAtIndexRule),
        ("testCollectionHasCount", testCollectionHasCount),
        ("testEquals", testEquals),
        ("testEqualsExecute", testEqualsExecute),
        ("testEqualsNil", testEqualsNil),
        ("testEqualsWithNonNilOptional", testEqualsWithNonNilOptional),
        ("testEquateValueMatcherToBooleanFalse", testEquateValueMatcherToBooleanFalse),
        ("testEquateValueMatcherToBooleanTrue", testEquateValueMatcherToBooleanTrue),
        ("testHasCount", testHasCount),
        ("testIsNil", testIsNil),
        ("testLazyEquals", testLazyEquals),
        ("testLazyEqualsDoesNotExecuteWhenPreviousMatchingFails", testLazyEqualsDoesNotExecuteWhenPreviousMatchingFails),
        ("testLazyEqualsExecute", testLazyEqualsExecute),
        ("testLazyEqualsNil", testLazyEqualsNil),
        ("testLazyEqualsOnlyExecutesWhenMatching", testLazyEqualsOnlyExecutesWhenMatching),
        ("testLazyEqualsWithNonNilOptional", testLazyEqualsWithNonNilOptional),
        ("testNot", testNot),
        ("testNotOnMatcher", testNotOnMatcher),
        ("testNotOperator", testNotOperator),
        ("testNotOperatorOnMatchRule", testNotOperatorOnMatchRule),
    ]
}

extension ValueTransformerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueTransformerTests = [
        ("testDebugTransform", testDebugTransform),
        ("testDebugTransformComplex", testDebugTransformComplex),
        ("testDebugTransformFailedMiddleTransformation", testDebugTransformFailedMiddleTransformation),
        ("testDebugTransformFailedTransformation", testDebugTransformFailedTransformation),
        ("testDebugTransformFailValidationResult", testDebugTransformFailValidationResult),
        ("testDebugTransformMessageIsLazilyEvaluated", testDebugTransformMessageIsLazilyEvaluated),
        ("testDebugTransformNested", testDebugTransformNested),
        ("testFailTransformExpression", testFailTransformExpression),
        ("testTransformExpression", testTransformExpression),
        ("testValidate", testValidate),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AccessLevelTests.__allTests__AccessLevelTests),
        testCase(ExpressionTests.__allTests__ExpressionTests),
        testCase(Expression_MatcherTests.__allTests__Expression_MatcherTests),
        testCase(FunctionIdentifierTests.__allTests__FunctionIdentifierTests),
        testCase(FunctionSignatureParserTests.__allTests__FunctionSignatureParserTests),
        testCase(FunctionSignatureTests.__allTests__FunctionSignatureTests),
        testCase(PatternTests.__allTests__PatternTests),
        testCase(StatementTests.__allTests__StatementTests),
        testCase(SwiftASTSerializerTests.__allTests__SwiftASTSerializerTests),
        testCase(SwiftTypeParserTests.__allTests__SwiftTypeParserTests),
        testCase(SwiftTypeTests.__allTests__SwiftTypeTests),
        testCase(SyntaxNodeIteratorTests.__allTests__SyntaxNodeIteratorTests),
        testCase(SyntaxNodeRewriterTests.__allTests__SyntaxNodeRewriterTests),
        testCase(SyntaxNodeTests.__allTests__SyntaxNodeTests),
        testCase(TypeFormatterTests.__allTests__TypeFormatterTests),
        testCase(ValueMatcherTests.__allTests__ValueMatcherTests),
        testCase(ValueMatcher_MatchersTests.__allTests__ValueMatcher_MatchersTests),
        testCase(ValueTransformerTests.__allTests__ValueTransformerTests),
    ]
}
#endif
